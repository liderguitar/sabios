<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Venta', 'doctrine');

/**
 * BaseVenta
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $app_id
 * @property timestamp $fecha
 * @property integer $clienteId
 * @property integer $vendedorId
 * @property integer $ventaEstadoId
 * @property integer $formaDePagoId
 * @property decimal $formaDePagoPorc
 * @property enum $borrado
 * @property Cliente $Cliente
 * @property VentaEstado $VentaEstado
 * @property Vendedor $Vendedor
 * @property PagoTipo $PagoTipo
 * @property Doctrine_Collection $VentaDetalle
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseVenta extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('venta');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('app_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('fecha', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('clienteId', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('vendedorId', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ventaEstadoId', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('formaDePagoId', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('formaDePagoPorc', 'decimal', 8, array(
             'type' => 'decimal',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'scale' => '2',
             ));
        $this->hasColumn('borrado', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Y',
              1 => 'N',
             ),
             'primary' => false,
             'default' => 'N',
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Cliente', array(
             'local' => 'clienteId',
             'foreign' => 'id'));

        $this->hasOne('VentaEstado', array(
             'local' => 'ventaEstadoId',
             'foreign' => 'id'));

        $this->hasOne('Vendedor', array(
             'local' => 'vendedorId',
             'foreign' => 'id'));

        $this->hasOne('PagoTipo', array(
             'local' => 'formaDePagoId',
             'foreign' => 'id'));

        $this->hasMany('VentaDetalle', array(
             'local' => 'id',
             'foreign' => 'ventaId'));
    }
}