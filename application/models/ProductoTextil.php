<?php

/**
 * ProductoTextil
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductoTextil extends BaseProductoTextil {

    public static function getByProductoId($productoId) {
        try {
            $data = Doctrine_Query::create()->select()
                            ->from('Producto p')
                            ->leftJoin('p.FotosPorProducto fxp')
                            ->leftJoin('fxp.Foto')
                            ->leftJoin('p.ProductoTextil pt')
                            ->leftJoin('pt.TalleTipo tp')
                            ->leftJoin('pt.TallePorProductoTextil tppt')
                            ->leftJoin('tppt.Talle t')
                            ->where('pt.id=' . $productoId)
                            ->andWhere("p.app_id='" . APPLICATION_ID . "'")
                            ->andWhere("p.borrado='N'")->execute();
        } catch (Exception $e) {
            die($e->getMessage());
        }
        
        $producto = $data[0];


        return $producto;
    }
    public static function getByProductoIdArray($productoId) {

        $producto = ProductoTextil::getByProductoId($productoId);
        $producto = $producto->toArray();
        
        try {
            $data = Doctrine_Query::create()->select()
                            ->from('Talle t')
                            ->where("t.id_tipo_talle='" . $producto["ProductoTextil"][0]["TalleTipo"]["id"] . "'")
                            ->andWhere("t.app_id='" . APPLICATION_ID . "'")
                            ->andWhere("t.borrado='N'")->orderBy("t.prioridad asc")->execute()->toArray();
        } catch (Exception $e) {
            die($e->getMessage());
        }
        foreach ($data as $talle) {
            $newArray = array();
            $newArray["stock"] = 0;
            $newArray["Talle"] = $talle;
            $encontrado = false;
            foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
                if ($tppt["Talle"]["id"] == $newArray["Talle"]["id"])
                    $encontrado = true;
            }
            if (!$encontrado)
                $producto['ProductoTextil'][0]["TallePorProductoTextil"][] = $newArray;
        }
        $newArray = array();
        foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
            $newArray[$tppt["Talle"]["prioridad"]] = $tppt;
        }
        ksort($newArray);
        $producto['ProductoTextil'][0]["TallePorProductoTextil"] = $newArray;

        return $producto;
    }
    
    public static function getTallesPorProducto($productoId) {
        
        $producto = ProductoTextil::getByProductoId($productoId);
        $producto = $producto->toArray();
        
        try {
            $data = Doctrine_Query::create()->select()
                            ->from('Talle t')
                            ->where("t.id_tipo_talle='" . $producto["ProductoTextil"][0]["TalleTipo"]["id"] . "'")
                            ->andWhere("t.app_id='" . APPLICATION_ID . "'")
                            ->andWhere("t.borrado='N'")->orderBy("t.prioridad asc")->execute()->toArray();
        } catch (Exception $e) {
            die($e->getMessage());
        }
        
        foreach ($data as $talle) {
            $newArray = array();
            $newArray["stock"] = 0;
            $newArray["Talle"] = $talle;
            $encontrado = false;
            foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
                if ($tppt["Talle"]["id"] == $newArray["Talle"]["id"])
                    $encontrado = true;
            }
            if (!$encontrado)
                $producto['ProductoTextil'][0]["TallePorProductoTextil"][] = $newArray;
        }
        $newArray = array();
        foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
            $newArray[$tppt["Talle"]["prioridad"]] = $tppt;
        }
        ksort($newArray);
        //$producto['ProductoTextil'][0]["TallePorProductoTextil"] = $newArray;

        return $newArray;        
  
        
    }
    
    public static function getTallesPorProducto2($productoId) {
        
        $producto = ProductoTextil::getByProductoId($productoId);
        $producto = $producto->toArray();
       // var_dump($producto['ProductoTextil'][0]["TallePorProductoTextil"]);die;
        try {
            $data = Doctrine_Query::create()->select()
                            ->from('Talle t')
                            ->where("t.id_tipo_talle='" . $producto["ProductoTextil"][0]["TalleTipo"]["id"] . "'")
                            ->andWhere("t.app_id='" . APPLICATION_ID . "'")
                            ->andWhere("t.borrado='N'")->orderBy("t.prioridad asc")->execute()->toArray();
        } catch (Exception $e) {
            die($e->getMessage());
        }
        
        foreach ($data as $talle) {
            $newArray = array();
            $newArray["stock"] = 0;
            $newArray["Talle"] = $talle;
            
            $encontrado = false;
            foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
                if ($tppt["Talle"]["id"] == $newArray["Talle"]["id"])
                    $encontrado = true;
            }
            if (!$encontrado)
                $producto['ProductoTextil'][0]["TallePorProductoTextil"][] = $newArray;
        }
        $newArray = array();
        foreach ($producto['ProductoTextil'][0]["TallePorProductoTextil"] as $tppt) {
            $newArray[$tppt["Talle"]["prioridad"]] = $tppt;
           // $newArray[$tppt["Talle"]["prioridad"]]['id'] = $producto['ProductoTextil'][0]["TallePorProductoTextil"]['id'];
        }
        ksort($newArray);
        //$producto['ProductoTextil'][0]["TallePorProductoTextil"] = $newArray;

        return $newArray;        
  
        
    }

}